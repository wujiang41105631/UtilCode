1. java 对象布局[64位机器]
    [通过 hotsport 的jol工具可以看到]
  1> 普通对象：
        对象头 [12 Byte]
        对齐[padding] 对象必须是8的整数倍，如果不足，就补齐，如果关掉UseCompressedClassPointers，则classPointer会占8个字节
        实例数据
  2> 数组对象：
       对象头 [markword [8字节]+class pointer [4字节]]
       数组长度[4字节]
       对齐[padding] 对象必须是8的整数倍，如果不足，就补齐
       实例数据
2. 对象头 [12 Byte]    【windows 都是小端存储，mac可能是大端存储】
    1> markword [8个字节]
    2> klass pointer [4个字节]   【如果指针压缩没有开启的话，占用8字节】
        大端模式，是指数据的高字节保存在内存的低地址中，而数据的低字节保存在内存的高地址中，这样的存储模式有点儿类似于把数据当作字符串顺序处理：地址由小向大增加，而数据从高位往低位放；这和我们的阅读习惯一致。
        小端模式，是指数据的高字节保存在内存的高地址中，而数据的低字节保存在内存的低地址中，这种存储模式将地址的高低和数据位权有效地结合起来，高地址部分权值高，低地址部分权值低。
3 。mark word包括什么？
    1> identity hash code 31位
    2> gc 信息 [分代] 4位
    3> 锁的信息[] 2位
    4> 1位偏向锁

4。在java启动时，可以加启动参数:
        -XX:+UseCompressedClassPointers 是否启用压缩类指针,默认开启
        -XX:+UseCompressedOops 使用压缩普通对象指针,默认开启


5. classLoader
    1> 类型
        分为两类：系统类加载器和用户级别的
        系统类加载器[详见 OriginalClassLoaderTest.java]
           <1> 启动类加载器  通过C实现
           <2> 扩展类加载器  java 实现
           <3> 应用类加载器(App类加载器)  java 实现
        用户级别的
           <4> 自定义加载器（继承ClassLoader）
    2> 加载
        什么时候触发jvm 类加载器去加载类，jvm规范本身没有约束，只是说 主动使用的时候会触发。
        1> 主动使用 --> 类的初始化：
             getStatic 调用类的静态字段
             invokeStatic 调用类的静态方法
             main 调用main方法
             new new对象
             Class.forName
             子类初始化
         注意： 类加载不一定会初始化，初始化一定会进行类加载
         类加载的时候会触发ClassLoader.loadClass 去加载
    3> 双亲委派模型:
        1. 操作： 自底向上检查是否被加载，自顶向下加载。
    4> 命名空间
        1.不同的ClassLoader有不同的ClassLoader
        2.类加载器的命名空间是由 类加载器本身以及所有父加载器所加载出来的binary name(full class name)组成。
    5> 打破双亲委派模型
       双亲委派好处：
            1、防止重复加载同一个.class。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。
            2、保证核心.class不能被篡改，并且优先加载。通过委托方式，不会去篡改核心.class，即使篡改也不会去加载，即使加载也不会是同一个.class对象了。不同的加载器加载同一个.class也不是同一个Class对象。这样保证了Class执行安全。

       如何打破双亲委派模型？
           自定义类加载器，重写loadClass方法；
           使用线程上下文类加载器；【Thread.currentThread().getClassLoader】
           spi: ServiceLoader ,用的也是 使用线程上下文类加载器的方式

       双亲委派模型破坏史
       1.第一次破坏
            由于双亲委派模型是在JDK1.2之后才被引入的，而类加载器和抽象类java.lang.ClassLoader则在JDK1.0时代就已经存在，面对已经存在的用户自定义类加载器的实现代码，Java设计者引入双亲委派模型时不得不做出一些妥协。在此之前，用户去继承java.lang.ClassLoader的唯一目的就是为了重写loadClass()方法，因为虚拟机在进行类加载的时候会调用加载器的私有方法loadClassInternal()，而这个方法唯一逻辑就是去调用自己的loadClass()。
       2.第二次破坏
            双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷所导致的，双亲委派很好地解决了各个类加载器的基础类的同一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API，但世事往往没有绝对的完美。
               如果基础类又要调用回用户的代码，那该么办？
               一个典型的例子就是JNDI服务，JNDI现在已经是Java的标准服务，
               它的代码由启动类加载器去加载（在JDK1.3时放进去的rt.jar），但JNDI的目的就是对资源进行集中管理和查找，它需要调用由独立厂商实现并部署在应用程序的ClassPath下的JNDI接口提供者的代码，但启动类加载器不可能“认识”这些代码。
               为了解决这个问题，Java设计团队只好引入了一个不太优雅的设计：线程上下文类加载器(Thread Context ClassLoader)。这个类加载器可以通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果创建线程时还未设置，他将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。
               有了线程上下文加载器，JNDI服务就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型层次结构来逆向使用类加载器，实际上已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java中所有涉及SPI的加载动作基本上都采用这种方式，例如JNDI、JDBC、JCE、JAXB和JBI等。
       3.第三次破坏
           双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求导致的，这里所说的“动态性”指的是当前一些非常“热门”的名词：代码热替换、模块热部署等，简答的说就是机器不用重启，只要部署上就能用。
           OSGi实现模块化热部署的关键则是它自定义的类加载器机制的实现。每一个程序模块(Bundle)都有一个自己的类加载器，当需要更换一个Bundle时，就把Bundle连同类加载器一起换掉以实现代码的热替换。在OSGi幻境下，类加载器不再是双亲委派模型中的树状结构，而是进一步发展为更加复杂的网状结构，当受到类加载请求时，OSGi将按照下面的顺序进行类搜索：
           1）将java.＊开头的类委派给父类加载器加载。
           2）否则，将委派列表名单内的类委派给父类加载器加载。
           3）否则，将Import列表中的类委派给Export这个类的Bundle的类加载器加载。
           4）否则，查找当前Bundle的ClassPath，使用自己的类加载器加载。
           5）否则，查找类是否在自己的Fragment Bundle中，如果在，则委派给Fragment Bundle的类加载器加载。
           6）否则，查找Dynamic Import列表的Bundle，委派给对应Bundle的类加载器加载。
           7）否则，类加载器失败。
    6. 全盘委托
        解决先用谁去加载类的问题？
        是利用当前方法（或者当前类）的类加载器来作为优先的类加载器


2. java 引用
    强
    软:  用来做缓存。当内存不够时，直接回收
    弱:  一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存
    虚： 管理堆外内存，有个queue（虚对象被垃圾回收后，堆外内存也被回收）
3。 java 和dubbo的spi
    1> java spi 不能单独获取某个实现类
    2> java spi 没有实现ioc 和aop
4.  AQS:
    1。 单个线程->线程交替执行的话其实和队列无关
5. 内存逃逸：
    数组长度不要超过64，可以通过-XX:EliminateAllocationArraySizeLimit=n来进行控制，n是数组的大小。来控制
6. 并发队列：
    ConcurrentLinkedQueue： 无锁队列，采用cas 实现，并发量适中的情况下可以用
7. 轻量锁 升级 成重量锁
    1。 等待线程数 超过cpu 核数的一半
    2。 自悬次数超过N的时候，jdk 1.6开始自适应了
8。锁的升级过程
偏向锁
为什么要引入偏向锁？
因为经过HotSpot的作者大量的研究发现，大多数时候是不存在锁竞争的，常常是一个线程多次获得同一个锁，因此如果每次都要竞争锁会增大很多没有必要付出的代价，为了降低获取锁的代价，才引入的偏向锁。
偏向锁原理和升级过程
当线程1访问代码块并获取锁对象时，会在java对象头和栈帧中记录偏向的锁的threadID，因为偏向锁不会主动释放锁，因此以后线程1再次获取锁的时候，需要比较当前线程的threadID和Java对象头中的threadID是否一致，如果一致（还是线程1获取锁对象），则无需使用CAS来加锁、解锁；如果不一致（其他线程，如线程2要竞争锁对象，而偏向锁不会主动释放因此还是存储的线程1的threadID），那么需要查看Java对象头中记录的线程1是否存活，如果没有存活，那么锁对象被重置为无锁状态，其它线程（线程2）可以竞争将其设置为偏向锁；如果存活，那么立刻查找该线程（线程1）的栈帧信息，如果还是需要继续持有这个锁对象，那么暂停当前线程1，撤销偏向锁，升级为轻量级锁，如果线程1 不再使用该锁对象，那么将锁对象状态设为无锁状态，重新偏向新的线程。
轻量级锁
为什么要引入轻量级锁？
轻量级锁考虑的是竞争锁对象的线程不多，而且线程持有锁的时间也不长的情景。因为阻塞线程需要CPU从用户态转到内核态，代价较大，如果刚刚阻塞不久这个锁就被释放了，那这个代价就有点得不偿失了，因此这个时候就干脆不阻塞这个线程，让它自旋这等待锁释放。
轻量级锁原理和升级过程
线程1获取轻量级锁时会先把锁对象的对象头MarkWord复制一份到线程1的栈帧中创建的用于存储锁记录的空间（称为DisplacedMarkWord），然后使用CAS把对象头中的内容替换为线程1存储的锁记录（DisplacedMarkWord）的地址；
如果在线程1复制对象头的同时（在线程1CAS之前），线程2也准备获取锁，复制了对象头到线程2的锁记录空间中，但是在线程2CAS的时候，发现线程1已经把对象头换了，线程2的CAS失败，那么线程2就尝试使用自旋锁来等待线程1释放锁。 自旋锁简单来说就是让线程2在循环中不断CAS
但是如果自旋的时间太长也不行，因为自旋是要消耗CPU的，因此自旋的次数是有限制的，比如10次或者100次，如果自旋次数到了线程1还没有释放锁，或者线程1还在执行，线程2还在自旋等待，这时又有一个线程3过来竞争这个锁对象，那么这个时候轻量级锁就会膨胀为重量级锁。重量级锁把除了拥有锁的线程都阻塞，防止CPU空转。

9.final关键字的好处
    下面总结了一些使用final关键字的好处
    final关键字提高了性能。JVM和Java应用都会缓存final变量。
    final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。
    使用final关键字，JVM会对方法、变量及类进行优化。