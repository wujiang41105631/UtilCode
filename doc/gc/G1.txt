1. G1 内部细节
    1> 无需回收整个堆，而是选择一个Collection set(cs).
    2> 2种gc， Full yong gc 和 mixed gc
         Full yong gc:
             stw(疏散 Pause)
                1，构建CS (eden+survivor)
                2. 扫描gc root
                3. update rs 清空dirty card queue
                4. Process rs 找到哪些被年老带对象引用
                5。Object copy
                6. reference processing
            -- 以上6步都走完后，G1记录每个阶段的时间，用于自动调优，
            -- 记录Eden/survivor数量和GC时间
                   根据暂停目标(调优参数，是个时间)自动调整region数量
                   暂停目标越短，eden数量 越少【吞吐量少了】
                   -XX:+PrintAdaptiveSizePolicy // 自适应的尺寸调节策略
                   -XX:+PrintTenuringDistribution // 打印资深提升的分布
          Old GC:
                标记是并发进行的。
                用三色标记算法。
                    黑：GC ROOT
                    白：初始状态
                    灰 : GC ROOT 指向的对象，灰色对象入队列。然后从队列里面把灰色的变成 黑的。
                    会有Object lost.
                流程：
                    STW:
                        piggy-backed on yong gc
                        利用yong gc 的信息。
                    恢复应用线程。
                    并发初始标记
                    STW
                        remark
                            STAB/Refrence processing
                        clean up:
                            立刻回收全空的区
                    恢复应用线程
          MIX GC：





    3> 估计每个region种的垃圾比例，优先回收垃圾多的region
2. 问题：
     跨代引用
     不同的region之间存在相互引用。
3。问题解决
     remember set(rs): 记住那个region引用本region的内存
        指向card table中对应的entity
        可找到具体内存区域
     cart table
        table中的每个entry覆盖512Byte的空间
        当对应的内存空间发生改变时，标记为dirty
            write barrier
                1. jvm 注入代码，记录引用指针变化
                2.更新指针时，
                    标记card 为dirty
                    将card 计入 dirty card queue，队列有白/绿/黄/红 4种颜色，
                        白表示状态更新很慢，
                        绿色（-XX:G1ConRefinementGreenZone = N） Refinement线程被激活，开始更新RS
                        黄色（-XX:G1ConRefinementYellowZone = N） 所有的 Refinement线程被激活，排空queue;
                        红色（-XX:G1ConRefinementRedZone = N） 应用线程也才遇到排空队列的工作


     空间换时间
         用额外的空间维护引用信息
         5%~10% memory overhead
垃圾回收流程
    STW 初始标记 Initial Mark
        初始标记(Initial Mark)负责标记所有能被直接可达的根对象(原生栈对象、全局对象、JNI对象)，根是对象图的起点，因此初始标记需要将Mutator线程(Java应用线程)暂停掉，也就是需要一个STW的时间段。事实上，当达到IHOP阈值时，G1并不会立即发起并发标记周期，而是等待下一次年轻代收集，利用年轻代收集的STW时间段，完成初始标记，这种方式称为借道(Piggybacking)。在初始标记暂停中，分区的NTAMS都被设置到分区顶部Top，初始标记是并发执行，直到所有的分区处理完。
    根分区扫描 Root Region Scanning
        在初始标记暂停结束后，年轻代收集也完成的对象复制到Survivor的工作，应用线程开始活跃起来。此时为了保证标记算法的正确性，所有新复制到Survivor分区的对象，都需要被扫描并标记成根，这个过程称为根分区扫描(Root Region Scanning)，同时扫描的Suvivor分区也被称为根分区(Root Region)。根分区扫描必须在下一次年轻代垃圾收集启动前完成(并发标记的过程中，可能会被若干次年轻代垃圾收集打断)，因为每次GC会产生新的存活对象集合。
    STW 并发标记 Concurrent Marking
        和应用线程并发执行，并发标记线程在并发标记阶段启动，由参数-XX:ConcGCThreads(默认GC线程数的1/4，即-XX:ParallelGCThreads/4)控制启动数量，每个线程每次只扫描一个分区，从而标记出存活对象图。在这一阶段会处理Previous/Next标记位图，扫描标记对象的引用字段。同时，并发标记线程还会定期检查和处理STAB全局缓冲区列表的记录，更新对象引用信息。参数-XX:+ClassUnloadingWithConcurrentMark会开启一个优化，如果一个类不可达(不是对象不可达)，则在重新标记阶段，这个类就会被直接卸载。所有的标记任务必须在堆满前就完成扫描，如果并发标记耗时很长，那么有可能在并发标记过程中，又经历了几次年轻代收集。如果堆满前没有完成标记任务，则会触发担保机制，经历一次长时间的串行Full GC。
    存活数据计算 Live Data Accounting
        存活数据计算(Live Data Accounting)是标记操作的附加产物，只要一个对象被标记，同时会被计算字节数，并计入分区空间。只有NTAMS以下的对象会被标记和计算，在标记周期的最后，Next位图将被清空，等待下次标记周期。
    重新标记 Remark
        重新标记(Remark)是最后一个标记阶段。在该阶段中，G1需要一个暂停的时间，去处理剩下的SATB日志缓冲区和所有更新，找出所有未被访问的存活对象，同时安全完成存活数据计算。这个阶段也是并行执行的，通过参数-XX:ParallelGCThread可设置GC暂停时可用的GC线程数。同时，引用处理也是重新标记阶段的一部分，所有重度使用引用对象(弱引用、软引用、虚引用、最终引用)的应用都会在引用处理上产生开销。
    清除 Cleanup
        紧挨着重新标记阶段的清除(Clean)阶段也是STW的。Previous/Next标记位图、以及PTAMS/NTAMS，都会在清除阶段交换角色。清除阶段主要执行以下操作：

RSet梳理，启发式算法会根据活跃度和RSet尺寸对分区定义不同等级，同时RSet数理也有助于发现无用的引用。参数-XX:+PrintAdaptiveSizePolicy可以开启打印启发式算法决策细节；
整理堆分区，为混合收集周期识别回收收益高(基于释放空间和暂停目标)的老年代分区集合；
识别所有空闲分区，即发现无存活对象的分区。该分区可在清除阶段直接回收，无需等待下次收集周期。

--------
H区：超过年轻代region大小的一半的时候会放到H区
占比：动态调整。新生代默认占堆的5%，慢慢会占到60%。
