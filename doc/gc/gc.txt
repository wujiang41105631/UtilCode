1. gc算法
   1> 标记清除
   2> 复制
   3> 标记压缩[整理]<mark-compact>
   4> 分代收集
   5> 分区算法: 则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿
 判断对象死亡的方法：
   1> 引用计数 -> 无法解决循环引用的问题
   2> 可达性分析
         GC ROOT:
             虚拟机栈中的引用对象
             方法区中类静态属性引用的对象
             方法区中常量引用对象
             本地方法栈中JNI引用对象
2. 垃圾收集器:
    gc的时候老年代有个担保机制：https://blog.csdn.net/weixin_33806300/article/details/92401022
   -XX:+UseSerialGC	Serial Garbage Collector 串行垃圾回收器
        最稳定以及效率高的收集器，可能会产生较长的停顿，只使用一个线程去回收。新生代、老年代使用串行回收；新生代复制算法、老年代标记-压缩；垃圾收集的过程中会Stop The World（服务暂停）
   -XX:+UseParallelGC	Parallel Garbage Collector并行垃圾回收器
        1> ParNew收集器其实就是Serial收集器的多线程版本。新生代复制算法、老年代标记-压缩
        2> 新生代并行，老年代串行；
   -XX:+UseParallelOldGC 使用Parallel收集器+ 老年代并行
        Parallel Old是Parallel Scavenge收集器的老年代版本，使用多线程和“标记－整理”算法。这个收集器是在JDK 1.6中才开始提供
   -XX:+UseConcMarkSweepGC	CMS Garbage Collector并发标记垃圾回收器 [响应优先]
        CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用都集中在互联网站或B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。
        从名字（包含“Mark Sweep”）上就可以看出CMS收集器是基于“标记-清除”算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为4个步骤，包括：
        初始标记（CMS initial mark） 初始标记仅仅只是标记一下标记老年代中所有存活的对象和GC Roots能直接关联到的对象，速度很快
        并发标记（CMS concurrent mark） 并发标记阶段就是进行GC Roots Tracing的过程  使用的是Incremental update批量更新算法,在增加引用时的写屏障中触发新的对象引用的标记
        -- 并发预清理 此阶段GC线程和应用线程也是并发执行，因为阶段2是与应用线程并发执行，可能有些引用关系已经发生改变。
                     通过卡片标记(Card Marking)，提前把老年代空间逻辑划分为相等大小的区域(Card)，如果引用关系发生改变，JVM会将发生改变的区域标记位“脏区”(Dirty Card)，然后在本阶段，这些脏区会被找出来，刷新引用关系，清除“脏区”标记
        -- 并发可取消的预清理(Concurrent Abortable Preclean)
                   此阶段也不停止应用线程. 本阶段尝试在 STW 的 最终标记阶段(Final Remark)之前尽可能地多做一些工作，以减少应用暂停时间
                   在该阶段不断循环处理：标记老年代的可达对象、扫描处理Dirty Card区域中的对象，循环的终止条件有：
                   1 达到循环次数
                   2 达到循环执行时间阈值
                   3 新生代内存使用率达到阈值

        -- 最终标记（CMS remark） 目标是完成老年代中所有存活对象的标记。在此阶段执行： 1 遍历新生代对象，重新标记 2 根据GC Roots，重新标记 3 遍历老年代的Dirty Card，重新标记
        并发清除（CMS concurrent sweep）
        并发重置(Concurrent Reset)
            此阶段与应用程序并发执行，重置CMS算法相关的内部数据, 为下一次GC循环做准备
        由于整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，所以总体上来说，CMS收集器的内存回收过程是与用户线程一起并发地执行。老年代收集器（新生代使用 ParNew）

        优点:并发收集、低停顿
        缺点：产生大量空间碎片、并发阶段会降低吞吐量

        常见问题及优化：
            1. 最终标记阶段停顿时间过长问题
            CMS的GC停顿时间约80%都在最终标记阶段(Final Remark)，若该阶段停顿时间过长，常见原因是新生代对老年代的无效引用，在上一阶段的并发可取消预清理阶段中，执行阈值时间内未完成循环，来不及触发Young GC，清理这些无效引用
            通过添加参数：-XX:+CMSScavengeBeforeRemark。在执行最终操作之前先触发Young GC，从而减少新生代对老年代的无效引用，降低最终标记阶段的停顿，但如果在上个阶段(并发可取消的预清理)已触发Young GC，也会重复触发Young GC
            2.并发模式失败(concurrent mode failure) & 晋升失败(promotion failed)问题
                并发模式失败：当CMS在执行回收时，新生代发生垃圾回收，同时老年代又没有足够的空间容纳晋升的对象时，CMS 垃圾回收就会退化成单线程的Full GC。所有的应用线程都会被暂停，老年代中所有的无效对象都被回收
                晋升失败：当新生代发生垃圾回收，老年代有足够的空间可以容纳晋升的对象，但是由于空闲空间的碎片化，导致晋升失败，此时会触发单线程且带压缩动作的Full GC
                并发模式失败和晋升失败都会导致长时间的停顿，常见解决思路如下：

                降低触发CMS GC的阈值，即参数-XX:CMSInitiatingOccupancyFraction的值，让CMS GC尽早执行，以保证有足够的空间
                增加CMS线程数，即参数-XX:ConcGCThreads，
                增大老年代空间
                让对象尽量在新生代回收，避免进入老年代
            3. 内存碎片问题
               通常CMS的GC过程基于标记清除算法，不带压缩动作，导致越来越多的内存碎片需要压缩，常见以下场景会触发内存碎片压缩：
                   新生代Young GC出现新生代晋升担保失败(promotion failed)
                   程序主动执行System.gc()
               可通过参数CMSFullGCsBeforeCompaction的值，设置多少次Full GC触发一次压缩，默认值为0，代表每次进入Full GC都会触发压缩，带压缩动作的算法为上面提到的单线程Serial Old算法，暂停时间(STW)时间非常长，需要尽可能减少压缩时间
               当碎片化超级严重的时候会退化成serial old

        -XX:+UseConcMarkSweepGC  使用CMS收集器

        -XX:+UseCMSCompactAtFullCollection Full GC后，进行一次碎片整理；整理过程是独占的，会引起停顿时间变长
        -XX:+CMSFullGCsBeforeCompaction  设置进行几次Full GC后，进行一次碎片整理m,默认是0
        -XX:ParallelCMSThreads  设定CMS的线程数量（一般情况约等于可用CPU数量） 
        年轻代的并行收集线程数默认是(ncpus <= 8) ? ncpus : 3 + ((ncpus * 5) / 8)，如果你希望设定这个线程数，可以通过-XX:ParallelGCThreads= N 来调整。
        CMS默认启动的回收线程数目是  (ParallelGCThreads + 3)/4)

         -server
           -Xmx6g
           -Xms4g
           -XX:SurvivorRatio=8
           -XX:NewRatio=4
           -XX:PermSize=256m
           -XX:MaxPermSize=512m
           -XX:+HeapDumpOnOutOfMemoryError
           -XX:+DisableExplicitGC
           -XX:+PrintGCDetails
           -XX:+PrintGCTimeStamps
           -XX:+PrintCommandLineFlags
           -XX:+UseConcMarkSweepGC
           -XX:+UseParNewGC
           -XX:ParallelCMSThreads=4  // 设定CMS的线程数量，cpu数量
           -XX:+CMSClassUnloadingEnabled
           -XX:+UseCMSCompactAtFullCollection. // 开启对年老带的压缩
           -XX:CMSFullGCsBeforeCompaction=1.   //设置进行1次Full GC后，进行一次碎片整理
           -XX:CMSInitiatingOccupancyFraction=72 // 是指设定CMS在对内存占用率达到72%的时候开始GC(因为CMS会有浮动垃圾,所以一般都较早启动GC);



   -XX:+UseG1GC	G1 Gargbage Collector 使用G1垃圾回收器[吞吐量优先]
        G1 逻辑分代，不是物理分代
        TLAB(本地线程缓冲区)   PLAB( 晋升本地分配缓冲区)   Collection Sets(CSets)待收集集合   Card Table 卡表  Remembered Sets(RSets)已记忆集合
        G1是目前技术发展的最前沿成果之一，HotSpot开发团队赋予它的使命是未来可以替换掉JDK1.5中发布的CMS收集器。与CMS收集器相比G1收集器有以下特点：
        (1). 空间整合，G1收集器采用标记整理算法，不会产生内存空间碎片。分配大对象时不会因为无法找到连续空间而提前触发下一次GC。
        (2). 可预测停顿，这是G1的另一大优势，降低停顿时间是G1和CMS的共同关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为N毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒，这几乎已经是实时Java（RTSJ）的垃圾收集器的特征了。
        上面提到的垃圾收集器，收集的范围都是整个新生代或者老年代，而G1不再是这样。使用G1收集器时，Java堆的内存布局与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔阂了，它们都是一部分（可以不连续）Region的集合。
        G1的新生代收集跟ParNew类似，当新生代占用达到一定比例的时候，开始出发收集。和CMS类似，G1收集器收集老年代对象会有短暂停顿。
        收集步骤：
        1)、标记阶段，首先初始标记(Initial-Mark),这个阶段是停顿的(Stop the World Event)，并且会触发一次普通Mintor GC。对应GC log:GC pause (young) (inital-mark)
        2)、Root Region Scanning，程序运行过程中会回收survivor区(存活到老年代)，这一过程必须在young GC之前完成。
        3)、Concurrent Marking，在整个堆中进行并发标记(和应用程序并发执行)，此过程可能被young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那个这个区域会被立即回收(图中打X)。同时，并发标记过程中，会计算每个区域的对象活性(区域中存活对象的比例)。使用的是SATB算法。在GC开始时先创建一个对象快照，STAB可以在并发标记时标记所有快照中当时的存活对象。标记过程中新分配的对象也会被标记为存活对象，不会被回收。
            和应用线程并发执行，并发标记线程在并发标记阶段启动，由参数-XX:ConcGCThreads(默认GC线程数的1/4，即-XX:ParallelGCThreads/4)控制启动数量，每个线程每次只扫描一个分区，从而标记出存活对象图。在这一阶段会处理Previous/Next标记位图，扫描标记对象的引用字段。同时，并发标记线程还会定期检查和处理STAB全局缓冲区列表的记录，更新对象引用信息。参数-XX:+ClassUnloadingWithConcurrentMark会开启一个优化，如果一个类不可达(不是对象不可达)，则在重新标记阶段，这个类就会被直接卸载。所有的标记任务必须在堆满前就完成扫描，如果并发标记耗时很长，那么有可能在并发标记过程中，又经历了几次年轻代收集。如果堆满前没有完成标记任务，则会触发担保机制，经历一次长时间的串行Full GC。
        4)、Remark, 再标记，会有短暂停顿(STW)。再标记阶段是用来收集 并发标记阶段 产生新的垃圾(并发阶段和应用程序一同运行)；G1中采用了比CMS更快的初始快照算法:snapshot-at-the-beginning (SATB)。
        5)、Copy/Clean up，多线程清除失活对象，会有STW。G1将回收区域的存活对象拷贝到新区域，清除Remember Sets，并发清空回收区域并把它返回到空闲区域链表中。
        6)、复制/清除过程后。回收区域的活性对象已经被集中回收到深蓝色和深绿色区域。

        可以简单记忆为: 初始标记,并发标记,重新标记,筛选清除

        唯一和串行垃圾回收器不同的是，并行垃圾回收器是使用多线程来进行垃圾回收工作的。
      G1的收集模式：
        YoungGC：收集年轻代里的Region
        MixGC：年轻代的所有Region+全局并发标记阶段选出的收益高的Region
        无论是YoungGC还是MixGC都只是并发拷贝的阶段。
        分代G1模式下选择CSet有两种子模式，分别对应YoungGC和mixedGC：
        YoungGC：CSet就是所有年轻代里面的Region
        MixedGC：CSet是所有年轻代里的Region加上在全局并发标记阶段标记出来的收益高的Region
        G1的运行过程是这样的，会在Young GC和Mix GC之间不断的切换运行，同时定期的做全局并发标记，在实在赶不上回收速度的情况下使用Full GC(Serial GC)。初始标记是搭在YoungGC上执行的，在进行全局并发标记的时候不会做Mix GC，在做Mix GC的时候也不会启动初始标记阶段。当MixGC赶不上对象产生的速度的时候就退化成Full GC，这一点是需要重点调优的地方。



     流行的组合
       Serial
       ParNew + CMS
       ParallelYoung + ParallelOld
       G1GC

并发标记的算法：
    1> 三色标记【三色扫描算法】：黑白灰三色，并发标记时，引用可能产生变化，白色对象有可能被标记回收
        1>> 黑色：表示自己遍历到了，自己的孩子也遍历到了
        2>> 灰色：表示自己遍历到了，孩子没有遍历到
        3>> 白色：表示自己没遍历，孩子没遍历
    2> cms 在并发标记的时候，用的是基于三色标记算法的Incremental update 增量标记，为了解决漏标误标的问题，用的写屏障
    3> g1 在并发标记的时候，用的是基于三色标记算法的STAB，snapshot at the beginning， 用的写屏障
    4> zgc 用的是colored pointers,颜色指针。主要用的读屏障。最大支持16T


   /export/local/jdk1.8/bin/java -Dnop -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.library.path=/usr/local/lib -server -Xms2048m -Xmx2048m -XX:PermSize=256m -XX:MaxPermSize=256m -Djava.awt.headless=true -Dsun.net.client.defaultConnectTimeout=60000 -Dsun.net.client.defaultReadTimeout=60000 -Djmagick.systemclassloader=no -Dnetworkaddress.cache.ttl=31 -Dsun.net.inetaddr.ttl=11 -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintHeapAtGC -Xloggc:/export/log/batman/gc.log -Djdk.tls.ephemeralDHKeySize=2048 -Djava.endorsed.dirs=/export/local/tomcat7/endorsed -classpath /export/local/tomcat7/bin/bootstrap.jar:/export/local/tomcat7/bin/tomcat-juli.jar -Dcatalina.base=/export/server/batman -Dcatalina.home=/export/local/tomcat7 -Djava.io.tmpdir=/export/server/batman/temp org.apache.catalina.startup.Bootstrap -config /export/server/batman/conf/server.xml start

jvm 简单设置：
    -XX:+PrintGCDateStamps
    -XX:+PrintGCDetails
    -XX:+PrintHeapAtGC
    -Xloggc:/export/log/batman/batman-gc-%t.log
    -XX:+HeapDumpOnOutOfMemoryError
https://blog.csdn.net/qq_28674045/article/details/51743922
https://me.csdn.net/iteye_13798

3。 默认 年老代：年轻代 = 2 ：1
    默认 eden : Survivor0:Survivor1=8:1:1
