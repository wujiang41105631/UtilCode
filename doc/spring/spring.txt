1. spring 的扩展
1> PropertyEditorSupport 集成该类实现自己定义的属性解析器。
   xml 中添加配置
    <bean class="org.Springframework.beans.factory.config.CustomEditorConfigurer ">
      <property name=" customEditors ">
        <map>
          <entry key=" java util. Date ">
            <bean class=" com test.DatePropertyEditor ">
              <property name=" format " value="yyyy-MM-dd"/>
            </bean>
          </entry>
        </map>
      </property>
    </bean>
2. BeanPostProcessor
   InitializingBean
3. applicationListener
4. Lifecycle:接口中有start/stop方法。实现此接口后spring 会保证在启动的时候调用其start方法开始声明中期，并在spring关闭的时候调用stop来结束声明周期，通常用来配置后台程序，如MQ进行轮训等等。
   而AbstractApplicationContext 的初始化中的finishRefresh()正式保证了这一功能的实现
5. SmartLifecycle 是一个接口。当Spring容器加载所有bean并完成初始化之后，会接着回调实现该接口的类中对应的方法（start()方法）。


5. beanFactory和FactoryBean
   1. BeanFacotry是spring中比较原始的Factory。如XMLBeanFactory就是一种典型的BeanFactory。原始的BeanFactory无法支持spring的许多插件，如AOP功能、Web应用等。 
      ApplicationContext接口,它由BeanFactory接口派生而来，ApplicationContext包含BeanFactory的所有功能，通常建议比BeanFactory优先
   2. 一般情况下，Spring通过反射机制利用<bean>的class属性指定实现类实例化Bean，在某些情况下，实例化Bean过程比较复杂，如果按照传统的方式，则需要在<bean>中提供大量的配置信息。配置方式的灵活性是受限的，这时采用编码的方式可能会得到一个简单的方案。Spring为此提供了一个org.springframework.bean.factory.FactoryBean的工厂类接口，用户可以通过实现该接口定制实例化Bean的逻辑。FactoryBean接口对于Spring框架来说占用重要的地位，Spring自身就提供了70多个FactoryBean的实现。

6. BeanFactoryPostProcessor是用来处理修改bean定义信息的后置处理器，这个时候bean还没有初始化，只是定好了BeanDefinition，在BeanFactoryPostProcessor接口的postProcessBeanFactory方法中，我们可以修改bean的定义信息，例如修改属性的值，修改bean的scope为单例或者多例。注意只是用来修改BeanDefination信息，不要getBean。
   BeanPostProcessor则是bean初始化前后对bean的一些操作，意思就是说bean在调用构造之后，初始化方法前后进行一些操作。 在BeanFactoryPostProcessor之后执行
7. spring aop 和 aspectjAOP 区别
    spring 使用了aspectJ的注解，
    springAop 是运行时增强，AspectJ是编译期增强。
    Spring AOP基于代理(Proxying)，而 AspectJ基于字节码操作(Bytecode Manipulation)。
    springAOP 简单，但是性能略差
    如果切面太多的话，建议用aspectJ

--------------------------------------------------   -------------------------
https://sexycoding.iteye.com/blog/1062372
spring ltw
Spring中开启aspectJ: <context: load-time-weaver/> aspectj-weaving = on|off|autodetect,默认值为autodetect,他会检测META-INF/aop.xml是否存在


5. Spring MVC  :
 1> ContextLoaderListener 实现了 ServletContextListener(servlet 规范中的)，启动时唤醒，
 2> 使用ServletContextListener接口，开发者能够在为客户端提供服务之前向SevletContext中添加任意的对象。这个对象在ServletContext启动的时候被初始化，然后在ServletContext真个运行期间都是课件的
 3> 每一个web应用都有一个 SevletContext 与之关联。SevletContext在应用启动时创建，关闭时被销毁，且在全局范围内有效。类似于全局变量
 4》 ServletContextListener中的核心逻辑便是初始化WebApplicationContext实例，并存放至ServletContext中。
 5> DispatcherServlet 实现了httpSevlet，走init方法启动

6. 向spring容器中注入bean 定义
   1> 通过@Import
      1>> @Import(value={AAAA.class})直接倒入摸个类
      2>> 实现 ImportBeanDefinitionRegistrar 类,然后通过@Import引入
      3>> 实现 ImportSelector 接口。,然后通过@Import引入
   2> @CompomentScan @Service @Bean @Controller
7. FactoryBean作用
   1> 第三方整合
   2> 对第三方屏蔽复杂的bean 定义
8. spring 循环依赖问题：
    1> 单例模式默认支持循环依赖.
    2> 如何关闭？ AbstractAutowireCapableBeanFactory.allowCircularReferences 循环注入
    3> 原理： 3级缓存处理(3个map)。
            1. 是spring上下文，singletonObjects
            2。singletonFactories 工厂，用来增强对象的创建过程【会对一堆BeanPostProcessor做调用】
            3. earlySingletonObjects【1.性能问题，2。防止重复创建】
9. @Autowired和@Resource有啥区别？
    Spring 后置处理器不一样
    spring不但支持自己定义的@Autowired注解，还支持几个由JSR-250规范定义的注解，它们分别是@Resource、@PostConstruct以及@PreDestroy。
    　　@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了
10 spring容器是啥？
    3个map + beanDefination + BeanPostProcessor
11.spring 的后置处理器，在启动的时候有8个地方
   1> AbstractAutowireCapableBeanFactory.createBean#resolveBeforeInstantiation: 主要处理 InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation
   2> AbstractAutowireCapableBeanFactory.createBeanInstance#determineConstructorsFromBeanPostProcessors：主要处理 SmartInstantiationAwareBeanPostProcessor，作用，由后置处理器返回那些构造方法
   3> AbstractAutowireCapableBeanFactory.doCreateBean#applyMergedBeanDefinitionPostProcessors：主要处理 MergedBeanDefinitionPostProcessor，作用，合并bean的缓存bean的配置信息
   4> AbstractAutowireCapableBeanFactory.doCreateBean#getEarlyBeanReference：主要处理 SmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference， 和1> 调用的方法不一样。作用，合并bean的缓存bean的配置信息。解决循环引用
   5> AbstractAutowireCapableBeanFactory.populateBean：主要处理 InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation，和1> 调用的方法不一样。作用，判断是否要注入属性，如果返回true，则可能进入自动装配
   6> AbstractAutowireCapableBeanFactory.populateBean：主要处理 InstantiationAwareBeanPostProcessor.postProcessPropertyValues， 自动装配
   7> AbstractAutowireCapableBeanFactory.initializeBean.applyBeanPostProcessorsBeforeInitialization主要处理：BeanPostProcess.postProcessBeforeInitialization： 生命周期回调之前调用，即@PostConstructor之前
   8> AbstractAutowireCapableBeanFactory.initializeBean.applyBeanPostProcessorsAfterInitialization 主要处理：BeanPostProcess.postProcessAfterInitialization 生成Aop
       (public abstract class AbstractAutoProxyCreator extends ProxyProcessorSupport implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware 他做了aop的代理，主要是wrapIfNecessary方法)

12. spring @Configuration
    作用：使类中的@Bean都是单例的
    实现方式：cglib代理
13. @Import原理
    AbstractApplicationContext refresh() ->
    AbstractApplicationContext invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) ->
    PostProcessorRegistrationDelegate invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) ->
    //重点就在于ConfigurationClassPostProcessor
    ConfigurationClassPostProcessor postProcessBeanDefinitionRegistry(BeanDefinitionRegistry registry) ->
    ConfigurationClassPostProcessor processConfigBeanDefinitions(BeanDefinitionRegistry registry) ->
    ConfigurationClassParser parse(Set<BeanDefinitionHolder> configCandidates) ->
    //这里有三个parse的方法，我们只取其中一个来进行分析
    ConfigurationClassParser parse(AnnotationMetadata metadata, String beanName) ->
    ConfigurationClassParser processConfigurationClass(ConfigurationClass configClass) ->
    ConfigurationClassParser doProcessConfigurationClass(ConfigurationClass configClass, SourceClass sourceClass)


