0. 关于IO的描述解释可以参考
    https://mp.weixin.qq.com/s?__biz=MzU0MzQ5MDA0Mw==&mid=2247483907&idx=1&sn=3d5e1384a36bd59f5fd14135067af1c2&chksm=fb0be897cc7c61815a6a1c3181f3ba3507b199fd7a8c9025e9d8f67b5e9783bc0f0fe1c73903&scene=21#wechat_redirect
记住这两点很重要
    1 等待数据准备 (Waiting for the data to be ready)
    2 将数据从内核拷贝到进程中 (Copying the data from the kernel to the process)
1。 根据UNIX网络编程对IO类型的分类，UNIX提供了5种IO模型：
     1> 阻塞I/O模型。
        特点是io执行的两个阶段用户进程都会阻塞住
     2> 非阻塞I/O模型。
        nonblocking IO特点是用户进程要不断的主动询问kernel数据是否准备好
     3> I/O复用模型 特殊的同步非阻塞。阻塞在select/epoll方法上
        select/epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就是select/epoll这个function会不断的轮询所负责的所有socket，当某个socket有数据到达了，就通知用户进程
        IO多路复用的特点是通过一种机制一个进程能同时等待多个文件描述符,而这些文件描述符(套接字描述符)其中任意一个进入就绪状态,select函数就可以返回。
        select和poll每次调用都需要遍历所有文件描述符，而epoll通过内核事件表和回调机制，只返回就绪的描述符，这样减少了遍历的开销。select的字符集最多支持1024个，poll的话不做限制。
        例如，来源[1]提到select使用轮询模型，效率低下，而epoll通过回调处理活跃的描述符。这可以作为select和epoll的主要区别点。v
     4> 信号驱动I/O模型
     5> 异步I/O
     如图所示
    同步IO和异步IO的区别就在于：数据拷贝的时候用户进程是否阻塞，同步需要主动把数据从内核空间拷贝到进程空间；异步由操作系统内核完成数据的拷贝。
    阻塞IO和非阻塞IO的区别就在于：应用程序的调用是否立即返回
2。 多路复用：
    I/O多路复用技术通过把多个I/O的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。
    epoll 内核向用户态发事件的事件触发模式：水平触发【保证事件不会丢】  边缘触发【只触发一次】

一、IO 介绍 详见https://my.oschina.net/u/3471412/blog/2966696
我们通常所说的 BIO 是相对于 NIO 来说的，BIO 也就是 Java 开始之初推出的 IO 操作模块，BIO 是 BlockingIO 的缩写，顾名思义就是阻塞 IO 的意思。
1.1 BIO、NIO、AIO的区别
BIO 就是传统的 java.io 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，
    也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用时可靠的线性顺序。
    它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。
NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，
    可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。
AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），
    异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，
    不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。

同步阻塞	最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态。
同步非阻塞	提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加CPU 消耗，要考虑增加的 I/O 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上。
异步非阻塞	这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O 组合方式。如 Cassandra 的 Gossip 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O 用这个方式性能能达到最高。

java 的NIO 比IO 优点：
    1> 非阻塞，可以一个线程管理多个socket链接
    2> Channel是双向的

