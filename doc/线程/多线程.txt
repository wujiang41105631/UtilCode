1。 线程模型：
        1> 用户线程(ULT)
                用户程序实现，不依赖于操作系统核心，应用提供 创建，同步，调度和管理线程的函数来控制用户线程。不需要用户态/核心态切换，速度快，内核对ult无感知。线程阻塞则进程阻塞
        2> 内核线程(KLT)：
                系统内核管理线程。内核保存线程状态和上下文信息。线程阻塞不会引起进程阻塞，在多处理器系统上并行运行，线程的创建，调度和管理由内核完成，效率比ult低，比进程操作要快
        用户线程和内核线程都是通过内核提供的交互式api来操作 内核空间的。用户线程不能直接操作cpu，但是内核线程却可以

        java的线程创建依赖于系统内核，通过jvm调用系统库创建内核线程，内核线程与java-Thread是1：1的映射关系
2。 大小设置
    CPU密集型：核数+1
    IO密集型： 2*核数+1
    计算公式：核数*(1+WT)/ST; WT是等待时间，ST是执行时间