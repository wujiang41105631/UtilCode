基于python3:
    1.    1/2=0.5    1%2=1
    2.    丢弃小数部分 1//2=0，10//3=3，  -10//3 = -4
    3。   x%y = x- ((x//y)*y)
    4.    使用python变量之前，必须给python变量赋值，他没有默认值
模块   倒入模块 import [模块名]，import的变种 from [模块名] import [函数名]
      事实上可以使用变量来引用函数(一起其他大部分Python元素)，执行赋值语句foo=math.sqrt后就可以使用foo来计算平方根，例如foo(4)的结果为2。-

      cmath和复数：
      from math import sqrt
      sqrt(-1)
      会报错

      由于复数的平方根为叙述，由实部和虚部组成的数为复数。Python标准库提供来一个专门用于处理复数的模块
      import cmath
      cmath.sqrt(-1)
      1j
       python中虚数以j结尾,另外python中没有专门表述虚数的类型，而将虚数视为实部为0的复数

python是交互式的解释器。
        字符串表示：
            str: 展示真正的字符串，转义字符会生效
            repr: 展示原始字符，转义字符不生效  repr("let's go") = repr("let\'s go") = "let\'s go"
            长字符串（跨越多行的字符串）用 '''  ''' 来表示 还可用3个单引号
            原始字符串用r前缀表示，原始字符串的最后一个字符不能为反斜杠,否则python会报错

列表和元组
    列表和元组的主要不同在于，列表是可以修改的，而元组不可以。这意味着列表适用于需要 中途添加元素的情形，而元组适用于出于某种考虑需要禁止修改序列的情形。禁止修改序列通常 出于技术方面的考虑，与Python的内部工作原理相关，这也是有些内置函数返回元组的原因所在。 在你自己编写程序时，几乎在所有情况下都可使用列表来代替元组。一种例外情况是将元组用作 字典键
    元组还可以这样定义：endings = ['st', 'nd', 'rd'] + 17 * ['th'] + ['st', 'nd', 'rd'] + 7 * ['th'] \ + ['st']
    索引：相当于数组下标
    切片：相当于数组的sublist,例如：
        numbers = [1,2,3,4,5,6,7,8,9,10]
        默认步长为1
        tag = '<a href="http://www.python.org">Python web site</a>'  tag[9:30] = 'http://www.python.org',tag[32:-4]=Python web site
        假设你要访问前述数字列表中的最后三个元素，显然可以明确地指定这一点。
        >>> numbers[7:10] [8, 9, 10]
        在这里，索引10指的是第11个元素:它并不存在，但确实是到达最后一个元素后再前进一步 所处的位置。明白了吗?如果要从列表末尾开始数，可使用负数索引。
        >>> numbers[-3:-1] [8, 9]
        然而，这样好像无法包含最后一个元素。如果使用索引0，即到达列表末尾后再前进一步所 处的位置，结果将如何呢?
        >>> numbers[-3:0] []
        结果并不是你想要的。事实上，执行切片操作时，如果第一个索引指定的元素位于第二个索 引指定的元素后面(在这里，倒数第3个元素位于第1个元素后面)，结果就为空序列。好在你能 使用一种简写:如果切片结束于序列末尾，可省略第二个索引。
        >>> numbers[-3:] [8, 9, 10]
        同样，如果切片始于序列开头，可省略第一个索引。
        >>> numbers[:3] [1, 2, 3]
        步长：
        numbers[3:6:3] = [4], 步长为第二个3
    序列相加【一般而言，不能拼接不同类 型的序列。】：
        [1, 2, 3] + [4, 5, 6] = [1, 2, 3, 4, 5, 6]
    乘法：
        将序列与数x相乘时，将重复这个序列x次来创建一个新序列:
        >>> 'python' * 5 'pythonpythonpythonpythonpython'
        >>> [42] * 10
        [42, 42, 42, 42, 42, 42, 42, 42, 42, 42]
        在有些情况下，你可能想使用表示“什么都没有”的值， 如表示还没有在列表中添加任何内容。在这种情况下，可使用None。在Python中，None表示什么 都没有。因此，要将列表的长度初始化为10，可像下面这样做:
        >>> sequence = [None] * 10
        >>> sequence
        [None, None, None, None, None, None, None, None, None, None]
      要检查特定的值是否包含在序列中，可使用运算符in。这个运算符与前面讨论的运算符(如 乘法或加法运算符)稍有不同。它检查是否满足指定的条件，并返回相应的值:满足时返回True， 不满足时返回False。这样的运算符称为布尔运算符，而前述真值称为布尔值
        >>> permissions = 'rw' 12 >>> 'w' in permissions
        True
        >>> 'x' in permissions
        False
       长度、最小值和最大值
       内置函数len、min和max很有用，其中函数len返回序列包含的元素个数，而min和max分别返 回序列中最小和最大的元素(对象比较将在5.4.6节的“比较运算符”部分详细介绍)。
       >>> numbers = [100, 34, 678]
       >>> len(numbers) 3
       >>> max(numbers)
           678
       >>> min(numbers)
           34
       >>> max(2, 3)
           3
       >>> min(9, 3, 2, 5)
           2
  列表
        鉴于不能像修改列表那样修改字符串，因此在有些情况下使用字符串来创建列表很有帮助
        为此，可使用函数list 。
        >>> list('Hello')
        ['H', 'e', 'l', 'l', 'o']
        可将任何序列(而不仅仅是字符串)作为list的参数

        要将字符列表(如前述代码中的字符列表)转换为字符串，可使用下面的表达式: ''.join(somelist)
        其中somelist是要转换的列表


        2. 删除元素 从列表中删除元素也很容易，只需使用del语句即可。
        >>> names = ['Alice', 'Beth', 'Cecil', 'Dee-Dee', 'Earl'] >>> del names[2]
        >>> names
        ['Alice', 'Beth', 'Dee-Dee', 'Earl']

        3. 给切片赋值 切片是一项极其强大的功能，而能够给切片赋值让这项功能显得更加强大。
        >>> name = list('Perl') >>> name
        ['P', 'e', 'r', 'l']
        >>> name[2:] = list('ar') >>> name
        ['P', 'e', 'a', 'r']

        使用切片赋值还可在不替换原有元素的情况下插入新元素。
        >>> numbers = [1, 5]
        >>> numbers[1:1] = [2, 3, 4] >>> numbers
        [1, 2, 3, 4, 5]

        4. 添加：
           append 方法append用于将一个对象附加到列表末尾。[clear(),copy()]
           >>> lst = [1, 2, 3]
           >>> lst.append(4)
           >>> lst
           [1, 2, 3, 4]
        5. count 方法count计算指定的元素在列表中出现了多少次。
            >>> ['to', 'be', 'or', 'not', 'to', 'be'].count('to')
            2
            >>> x = [[1, 2], 1, 1, [2, 1, [1, 2]]]
            >>> x.count(1)
            2
            >>> x.count([1, 2])
            1
        6. extend
       方法extend让你能够同时将多个值附加到列表末尾，为此可将这些值组成的序列作为参数提 供给方法extend。换而言之，你可使用一个列表来扩展另一个列表。
       >>> a = [1, 2, 3] >>> b = [4, 5, 6] >>> a.extend(b) >>> a
            [1, 2, 3, 4, 5, 6]
       这可能看起来类似于拼接，但存在一个重要差别，那就是将修改被扩展的序列(这里是a)。 在常规拼接中，情况是返回一个全新的序列。
       7。index 方法index在列表中查找指定值第一次出现的索引。
         >>> knights = ['We', 'are', 'the', 'knights', 'who', 'say', 'ni'] >>> knights.index('who')
         4
         >>> knights.index('herring')
         Traceback (innermost last):
         File "<pyshell>", line 1, in ?
         knights.index('herring')
         ValueError: list.index(x): x not in list
         搜索单词'who'时，发现它位于索引4处。 >>> knights[4]
         'who'
         然而，搜索'herring'时引发了异常，因为根本就没有找到这个单词。
        8. insert
        方法insert用于将一个对象插入列表。
        >>> numbers = [1, 2, 3, 5, 6, 7] >>> numbers.insert(3, 'four') >>> numbers
        [1, 2, 3, 'four', 5, 6, 7]
        与extend一样，也可使用切片赋值来获得与insert一样的效果。
        >>> numbers = [1, 2, 3, 5, 6, 7] >>> numbers[3:3] = ['four']
        >>> numbers
        [1, 2, 3, 'four', 5, 6, 7]
        这虽巧妙，但可读性根本无法与使用insert媲美。
        9. pop 方法pop从列表中删除一个元素(末尾为最后一个元素)，并返回这一元素。
        >>> x = [1, 2, 3]
        >>> x.pop()
         3
        >>> x
        [1, 2]
        >>> x.pop(0) 1
        >>> x [2]
        10。remove：  x.remove('be') ，删除元素，但是不返回值。如果要删除的值不在列表中，则报错
        11。reverse: 反转：  x.reverse();
                     反序迭代：>>> x = [1, 2, 3]
                              >>> list(reversed(x))
                              [3, 2, 1]
        12. sort 排序
        >>> x = [4, 6, 2, 1, 7, 9] >>> x.sort()
        >>> x
        [1, 2, 4, 6, 7, 9]

        >>> x = [4, 6, 2, 1, 7, 9]
        >>> y = x.copy()
        >>> y.sort()
        >>> x
        [4, 6, 2, 1, 7, 9]
        >>> y
        [1, 2, 4, 6, 7, 9]

        12. 高级排序
        方法sort接受两个可选参数:key和reverse。这两个参数通常是按名称指定的，称为关键字 参数，将在第6章详细讨论。参数key类似于参数cmp:你将其设置为一个用于排序的函数。然而， 不会直接使用这个函数来判断一个元素是否比另一个元素小，而是使用它来为每个元素创建一个 键，再根据这些键对元素进行排序。因此，要根据长度对元素进行排序，可将参数key设置为函数len。
        >>> x = ['aardvark', 'abalone', 'acme', 'add', 'aerate'] >>> x.sort(key=len)
        >>> x
        ['add', 'acme', 'aerate', 'abalone', 'aardvark']
        对于另一个关键字参数reverse，只需将其指定为一个真值(True或False，将在第5章详细介 绍)，以指出是否要按相反的顺序对列表进行排序。
        >>> x = [4, 6, 2, 1, 7, 9] >>> x.sort(reverse=True) >>> x
        [9, 7, 6, 4, 2, 1]
        函数sorted也接受参数key和reverse。在很多情况下，将参数key设置为一个自定义函数很有 用。第6章将介绍如何创建自定义函数。
2.4 元组:不可修改的序列
        与列表一样，元组也是序列，唯一的差别在于元组是不能修改的(你可能注意到了，字符串 也不能修改)。元组语法很简单，只要将一些值用逗号分隔，就能自动创建一个元组。
        >>> 1, 2, 3 (1, 2, 3)
        如你所见，元组还可用圆括号括起(这也是通常采用的做法)。
        >>> (1, 2, 3) (1, 2, 3)
        空元组用两个不包含任何内容的圆括号表示。
        >>> () ()
        你可能会问，如何表示只包含一个值的元组呢?这有点特殊:虽然只有一个值，也必须在它 后面加上逗号。
        >>> 42
        42
        >>> 42,
         (42,)
          >>> (42,)
          (42,)
        函数tuple的工作原理与list很像:它将一个序列作为参数，并将其转换为元组 。如果参数已经是元组，就原封不动地返回它。
3. 字符串
        >>> format = "Hello, %s. %s enough for ya?"
        >>> values = ('world', 'Hot')
        >>> format % values
        'Hello, world. Hot enough for ya?'
