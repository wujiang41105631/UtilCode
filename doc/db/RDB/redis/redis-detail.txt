1. zk,hbase,kafka: 二进制安全。底层都是一堆字节数组。


2. bitmap:
    setbit k1 1 1 [开辟了一个字节，8个 数字都是0,符合ascii码规则，第一个字符是0，其他随便放。]该命令表示在第二个字符上设置成1，此时ascii上展示的就是@
    bitcount 统计1 的个数
    bitop: 于，或，非。 可以用来统计任意时间段的活跃用户数
3. string 类型： bitmap,string,数字
4. list： 数组，队列，栈。
        ltrim: 剔除部分数据
5. set:
       1. 无序，不重复.
       2. 随机事例
       3. 集合的交，并，补集
6. zset
       1. 底层数据结构: 数据量少的时候是 ziplist,数据量大的时候是skiplist[最大有64层]


7.OBJECT 命令允许从内部察看给定 key 的 Redis 对象。

  它通常用在除错(debugging)或者了解为了节省空间而对 key 使用特殊编码的情况。
  当将Redis用作缓存程序时，你也可以通过 OBJECT 命令中的信息，决定 key 的驱逐策略(eviction policies)。
  OBJECT 命令有多个子命令：

  OBJECT REFCOUNT <key> 返回给定 key 引用所储存的值的次数。此命令主要用于除错。
  OBJECT ENCODING <key> 返回给定 key 锁储存的值所使用的内部表示(representation)。
  OBJECT IDLETIME <key> 返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位。

8。对象可以以多种方式编码：
  字符串可以被编码为 raw (一般字符串)或 int (用字符串表示64位数字是为了节约空间)。
  列表可以被编码为 ziplist 或 linkedlist 。 ziplist 是为节约大小较小的列表空间而作的特殊表示。
  集合可以被编码为 intset 或者 hashtable 。 intset 是只储存数字的小集合的特殊表示。
  哈希表可以编码为 zipmap 或者 hashtable 。 zipmap 是小哈希表的特殊表示。
  有序集合可以被编码为 ziplist 或者 skiplist 格式。 ziplist 用于表示小的有序集合，而 skiplist 则用于表示任何大小的有序集合

9。 持久化
    1>  aof: sync  vs  os (page cache: 两个维度：5s/内存的10% 刷磁盘，当内存>30的时候会阻塞进程) 手工开启。如果开启了这个，则redis重启后只会刷新aof,体积小
    2>  快照： 默认RDB
    3>  混合持久化:redis 4.x 以后，aof 文件分为2部分: 1> rdb 2> 追加的日志
    4>  持久化可以不做，可以通过主从同步把数搞过去
10. 单机问题：
    1. 单点故障：
        全量集群：
        1> 主备集群
        2> 主从复制集群
    2. 性能问题(并发量大，网卡打满. 性能有问题。)
        数据分片集群：
        1> 数据分片 。每台机器各自负责 一部分数据
    实际上，主要针对的是的 可用性 和 可扩展性
 11。redis的分片集群：
        算法是在redis server上的。每个机器上有槽位，和全局的 mapping，然后客户端访问的时候把key带上，就可以访问某台机器的时候由被访问的redis去和真正数据的redis去查数据
