LSM tree
常见的集中存储引擎：
 1>哈希存储引擎 是哈希表的持久化实现，支持增、删、改以及随机读取操作，但不支持顺序扫描，对应的存储系统为key-value存储系统。对于key-value的插入以及查询，哈希表的复杂度都是O(1)，明显比树的操作O(n)快,如果不需要有序的遍历数据，哈希表就是your Mr.Right
 2>B树存储引擎是B树（关于B树的由来，数据结构以及应用场景可以看之前一篇博文）的持久化实现，不仅支持单条记录的增、删、读、改操作，还支持顺序扫描（B+树的叶子节点之间的指针），对应的存储系统就是关系数据库（Mysql等）。
 3>LSM树（Log-Structured Merge Tree）存储引擎和B树存储引擎一样，同样支持增、删、读、改、顺序扫描操作。而且通过批量存储技术规避磁盘随机写入问题。当然凡事有利有弊，LSM树和B+树相比，LSM树牺牲了部分读性能，用来大幅提高写性能。


LSM-tree是一种分层的、有序的、基于硬盘的数据结构，设计思想：首先将对数据的修改增量写入内存中，达到阈值后批量flush到磁盘，使用归并排序的方式将内存中的数据合并追加到磁盘队尾。
LSM-tree主要利用顺序磁盘访问要比随机访问快很多的思想实现以提高写入性能。
LSM-tree以牺牲部分读取性能为代价提高写入性能，通常适合于写多读少的场景
LSM-tree提升读性能的优化策略主要有使用布隆过滤器、多路归并机制等。